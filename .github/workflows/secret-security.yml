name: Secret Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly security scan (Sundays at 2 AM UTC)
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  secret-scan:
    name: Scan for Hardcoded Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan
      
      - name: Run custom secret scanner
        run: |
          chmod +x scripts/security/scan-secrets.sh
          ./scripts/security/scan-secrets.sh || true
        continue-on-error: true
      
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified
      
      - name: GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional: for commercial use
      
      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: security-scans/
          retention-days: 30
      
      - name: Comment on PR (if secrets found)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Security Alert**: Potential secrets detected in this PR. Please review the scan results and remove any hardcoded credentials before merging.'
            })

  dependency-audit:
    name: Audit Dependencies for Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Check for known vulnerable packages
        run: |
          # Check for packages known to leak secrets
          npm list --depth=0 | grep -E "(dotenv-expand|nconf|config)" || true

  validate-gitignore:
    name: Validate .gitignore Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for .env files
        run: |
          # Fail if .env files are committed
          if git ls-files | grep -E '^\.env$|^\.env\.local$|^\.env\.production$'; then
            echo "ERROR: .env files found in repository!"
            exit 1
          fi
          echo "✓ No .env files committed"
      
      - name: Check for common secret files
        run: |
          # Check for other secret files
          if git ls-files | grep -E '(credentials|secrets?|\.pem|\.key|\.pfx)$'; then
            echo "WARNING: Potential secret files found"
            exit 1
          fi
          echo "✓ No obvious secret files found"
      
      - name: Validate .gitignore includes security scan results
        run: |
          if ! grep -q "security-scans/" .gitignore; then
            echo "WARNING: security-scans/ should be in .gitignore"
            exit 1
          fi
          echo "✓ .gitignore is properly configured"

  secret-manager-sync:
    name: Verify Secret Manager Configuration
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: env.AWS_ROLE_ARN != ''
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
        env:
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      
      - name: Check secret rotation status
        if: env.AWS_ROLE_ARN != ''
        run: |
          # List secrets and check rotation status
          aws secretsmanager list-secrets \
            --filters Key=name,Values=internet-id/prod/ \
            --query 'SecretList[?RotationEnabled==`false`].Name' \
            --output text | while read secret; do
              echo "WARNING: $secret does not have rotation enabled"
            done
        env:
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      
      - name: Check for secrets nearing rotation
        if: env.AWS_ROLE_ARN != ''
        run: |
          # Check for secrets older than 80 days (10 days before 90-day rotation)
          CUTOFF_DATE=$(date -d '80 days ago' +%Y-%m-%d)
          echo "Checking for secrets last rotated before: $CUTOFF_DATE"
          
          aws secretsmanager list-secrets \
            --filters Key=name,Values=internet-id/ \
            --query "SecretList[?LastRotatedDate<\`$CUTOFF_DATE\`].{Name:Name,LastRotated:LastRotatedDate}" \
            --output table
        env:
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-audit, validate-gitignore]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: secret-scan-results
          path: security-scans/
        continue-on-error: true
      
      - name: Generate summary report
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check if scan results exist
          if [ -d "security-scans" ] && [ "$(ls -A security-scans)" ]; then
            echo "## Secret Scan Results" >> security-summary.md
            echo "" >> security-summary.md
            
            # Extract summary from latest scan
            LATEST_SCAN=$(ls -t security-scans/secret-scan-*.txt | head -1)
            if [ -f "$LATEST_SCAN" ]; then
              tail -20 "$LATEST_SCAN" >> security-summary.md
            fi
          else
            echo "No scan results available" >> security-summary.md
          fi
          
          cat security-summary.md
      
      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
      
      - name: Post summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '';
            try {
              summary = fs.readFileSync('security-summary.md', 'utf8');
            } catch (error) {
              summary = 'Security scan summary not available';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            })
