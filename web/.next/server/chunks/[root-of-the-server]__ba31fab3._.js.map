{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///Users/patrick/Documents/Code/onnwee/internet-id/web/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { PrismaClient } from \"@prisma/client\";\n// Providers – start with GitHub and add more as needed. Twitter/X OAuth 2 requires\n// elevated access; placeholder shown for structure.\nimport GitHub from \"next-auth/providers/github\";\nimport Google from \"next-auth/providers/google\";\n// import Twitter from \"next-auth/providers/twitter\";\n\nconst prisma = new PrismaClient();\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  session: { strategy: \"database\" },\n  providers: [\n    GitHub({\n      clientId: process.env.GITHUB_ID || \"\",\n      clientSecret: process.env.GITHUB_SECRET || \"\",\n    }),\n    Google({\n      clientId: process.env.GOOGLE_ID || \"\",\n      clientSecret: process.env.GOOGLE_SECRET || \"\",\n    }),\n    // Twitter({\n    //   clientId: process.env.TWITTER_CLIENT_ID || \"\",\n    //   clientSecret: process.env.TWITTER_CLIENT_SECRET || \"\",\n    //   version: \"2.0\",\n    // }),\n  ],\n  callbacks: {\n    async session({ session, user }) {\n      if (session?.user) {\n        (session.user as any).id = user.id;\n      }\n      return session;\n    },\n    async signIn({ account, profile }) {\n      // Optionally capture platform username/url on Account model for later matching\n      // (requires adding those fields – already present in schema)\n      return true;\n    },\n  },\n  events: {\n    async linkAccount({ user, account, profile }: any) {\n      // Enrich Account with username/url where providers expose them\n      try {\n        if (!account?.provider || !account?.providerAccountId) return;\n        const data: any = {};\n        if (account.provider === \"github\" && profile) {\n          if (profile.login) data.username = profile.login;\n          if (profile.html_url) data.url = profile.html_url;\n        }\n        // For Google, generic profile lacks channel info; leave blank\n        if (Object.keys(data).length > 0) {\n          await prisma.account.update({\n            where: {\n              provider_providerAccountId: {\n                provider: account.provider,\n                providerAccountId: account.providerAccountId,\n              },\n            },\n            data,\n          });\n        }\n      } catch (e) {\n        console.error(\"linkAccount enrichment failed\", e);\n      }\n    },\n  },\n  pages: {\n    signIn: \"/signin\",\n    newUser: \"/register\",\n  },\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA,mFAAmF;AACnF,oDAAoD;AACpD;AACA;;;;;;AACA,qDAAqD;AAErD,MAAM,SAAS,IAAI,6IAAY;AAExB,MAAM,cAA+B;IAC1C,SAAS,IAAA,uKAAa,EAAC;IACvB,SAAS;QAAE,UAAU;IAAW;IAChC,WAAW;QACT,IAAA,gKAAM,EAAC;YACL,UAAU,QAAQ,GAAG,CAAC,SAAS,IAAI;YACnC,cAAc,QAAQ,GAAG,CAAC,aAAa,IAAI;QAC7C;QACA,IAAA,gKAAM,EAAC;YACL,UAAU,QAAQ,GAAG,CAAC,SAAS,IAAI;YACnC,cAAc,QAAQ,GAAG,CAAC,aAAa,IAAI;QAC7C;KAMD;IACD,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAE;YAC7B,IAAI,SAAS,MAAM;gBAChB,QAAQ,IAAI,CAAS,EAAE,GAAG,KAAK,EAAE;YACpC;YACA,OAAO;QACT;QACA,MAAM,QAAO,EAAE,OAAO,EAAE,OAAO,EAAE;YAC/B,+EAA+E;YAC/E,6DAA6D;YAC7D,OAAO;QACT;IACF;IACA,QAAQ;QACN,MAAM,aAAY,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAO;YAC/C,+DAA+D;YAC/D,IAAI;gBACF,IAAI,CAAC,SAAS,YAAY,CAAC,SAAS,mBAAmB;gBACvD,MAAM,OAAY,CAAC;gBACnB,IAAI,QAAQ,QAAQ,KAAK,YAAY,SAAS;oBAC5C,IAAI,QAAQ,KAAK,EAAE,KAAK,QAAQ,GAAG,QAAQ,KAAK;oBAChD,IAAI,QAAQ,QAAQ,EAAE,KAAK,GAAG,GAAG,QAAQ,QAAQ;gBACnD;gBACA,8DAA8D;gBAC9D,IAAI,OAAO,IAAI,CAAC,MAAM,MAAM,GAAG,GAAG;oBAChC,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;wBAC1B,OAAO;4BACL,4BAA4B;gCAC1B,UAAU,QAAQ,QAAQ;gCAC1B,mBAAmB,QAAQ,iBAAiB;4BAC9C;wBACF;wBACA;oBACF;gBACF;YACF,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC,iCAAiC;YACjD;QACF;IACF;IACA,OAAO;QACL,QAAQ;QACR,SAAS;IACX;AACF;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC","debugId":null}}]
}