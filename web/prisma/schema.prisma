generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Re-export the main schema by embedding models via `extends` is not supported.
// This local schema mirrors the shared schema to ensure generate writes under web/node_modules.
// Consider a symlink or workspace-level generate if you prefer a single copy.

model User {
  id             String   @id @default(cuid())
  address        String?  @unique
  email          String?  @unique
  name           String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime @default(now())
  contents       Content[]
  accounts       Account[]
  sessions       Session[]
}

model Content {
  id              String    @id @default(cuid())
  contentHash     String    @unique
  contentUri      String?
  manifestCid     String?
  manifestUri     String?
  creatorAddress  String
  creatorId       String?
  creator         User?     @relation(fields: [creatorId], references: [id])
  registryAddress String?
  txHash          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bindings        PlatformBinding[]
  verifications   Verification[]
}

model PlatformBinding {
  id         String   @id @default(cuid())
  platform   String
  platformId String
  content    Content? @relation(fields: [contentId], references: [id])
  contentId  String?
  createdAt  DateTime @default(now())

  @@unique([platform, platformId])
}

model Verification {
  id               String   @id @default(cuid())
  contentHash      String
  manifestUri      String
  recoveredAddress String
  creatorOnchain   String
  status           String
  createdAt        DateTime @default(now())
  contentId        String?
  content          Content? @relation(fields: [contentId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  refresh_token_expires_in Int?
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?
  username           String?
  url                String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
