// Default generator for API/scripts (root node_modules)
generator client {
  provider = "prisma-client-js"
}

// Generator for Next.js web app (web/node_modules)
generator client-web {
  provider = "prisma-client-js"
  output   = "../web/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  address       String?   @unique
  email         String?   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  contents      Content[]
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]

  @@index([createdAt])
}

model Content {
  id              String            @id @default(cuid())
  contentHash     String            @unique
  contentUri      String?
  manifestCid     String?
  manifestUri     String?
  creatorAddress  String
  creatorId       String?
  creator         User?             @relation(fields: [creatorId], references: [id])
  registryAddress String?
  txHash          String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bindings        PlatformBinding[]
  verifications   Verification[]

  @@index([creatorId])
  @@index([createdAt])
  @@index([creatorAddress])
}

model PlatformBinding {
  id         String   @id @default(cuid())
  platform   String
  platformId String
  content    Content? @relation(fields: [contentId], references: [id])
  contentId  String?
  createdAt  DateTime @default(now())

  @@unique([platform, platformId])
  @@index([contentId])
  @@index([platform])
  @@index([createdAt])
}

model Verification {
  id               String   @id @default(cuid())
  contentHash      String
  manifestUri      String
  recoveredAddress String
  creatorOnchain   String
  status           String
  createdAt        DateTime @default(now())
  contentId        String?
  content          Content? @relation(fields: [contentId], references: [id])

  @@index([createdAt])
  @@index([contentId])
  @@index([contentHash, createdAt])
  @@index([status, createdAt])
}

// NextAuth models
model Account {
  id                       String   @id @default(cuid())
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  refresh_token_expires_in Int?
  session_state            String?
  oauth_token              String?
  oauth_token_secret       String?
  // Optional convenience fields for display/matching
  username                 String?
  url                      String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([userId, provider])
  @@index([username])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id          String    @id @default(cuid())
  key         String    @unique // hashed API key
  name        String? // optional name for the key
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier        String    @default("free") // free, paid
  rateLimit   Int       @default(100) // requests per minute
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([key, isActive])
  @@index([expiresAt])
}
